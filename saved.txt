<template>

<div class="content is-medium main-article-container">

  <div>
    <img :src="Article.image_path">

    <div class="title">
      <h1 class="title is-3">{{Article.name}}</h1>
      <ArticleStars :datax="datax" :totalStars="totalStars"/> 
    </div>

    {{Article.description}}
  </div>
<RatingStarsSystem  :showStarUser="showStarUser" :slug="slugg" @starsGrade="publishStar"/> 

  <div class="comments-CommentComponent-container"> 
    <div class="comment-container">
        <div class="comment-div" v-for="comment in Comments">
          <div class="comment-div-2">
            <img :src="comment.user_photo" class="rounded-avatar">
            <h1 class="title is-4">{{ comment.username }}</h1>
            <h1 class="title is-4">{{ comment.title}}</h1>
            <h1 class="title is-5">{{ comment.comment }}</h1>
            <h1 class="title is-6">{{ comment.date_added }}</h1>
          </div>
        </div>
    </div>

    <div class="Comment-Component">
      <!-- remember u are passing props from here to CommentComponent (child component) -->
      <!-- remember u are triggering also emit over here  @myComment="publish" -->
      <div class="sticky">
            <CommentComponent :slugg="slugg"  @close="toggleModel" @myComment="publish"/>
      </div>
    </div>

  </div>

</div>

</template>

<!--  lang="scss" -->
<style lang="scss">

.title{
  display: flex;
  justify-content: space-between;


}

.starr{
  color:orange;
}


.grey {
  color:   grey;
}
.comment-div-2{
  margin-bottom: 25px;
}

.comment-container{
  // border: solid;
  margin: auto;
  width: 75%;
}

.comments-CommentComponent-container{
  // border: solid;
  display: flex;
}

.main-article-container{
  background-color: #ffffff;
  width: 80%;
  margin: auto;
  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
}

.Comment-Component{
  width: 90%;
  // border: solid red;
}

.sticky{
  position: sticky;
  top: 20px;

}

.comment-div{
  width: 90%;
  // border: solid red;
  margin: auto;
  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;

}

.rounded-avatar {
  object-fit: cover;
  border-radius: 50%;
  height: 100px;
  width: 100px;
}

</style>


<script>
import { createApp } from 'vue'
// import App from './App.vue'

import axios from 'axios'
import CommentComponent from '@/components/CommentComponent.vue'
import RatingStarsSystem from '@/components/RatingStarsSystem.vue'
import ArticleStars from '@/components/ArticleStars.vue'
export default {
  name: 'ArticleView',
  components: {
      CommentComponent,
      RatingStarsSystem,
      ArticleStars,
  },
  data() {
    return {
      Article: [],
      Comments:[],
      name:'a',
      slugg: 'null',
      slug:'aaaa',
      newComment:'s',
      showStarUser:null,
      photo: null,
      x:null,
      articalStarGrade: null,
      datax:'0',
      totalStars:null,
      // userID:null
    }
  },

    mounted() {
      this.showArticle()
      // this.showUserStars(this.$cookies.get("userID"),this.$route.params.slug)
      // this.showArticleStars(this.$route.params.slug)
      this.showComments(this.$route.params.slug)


    },

    methods: {
      async showArticle(){
        // when is app mounted i can accsess this.$route.params.slug 
        // i am passing slug trough my HomeView..... name: 'article' ,  params: {slug: article.slug}
        const slug = this.$route.params.slug
        const userID = this.$cookies.get("userID")
        this.slugg = slug
          axios.get(`/articles/${slug}/`).then(response => {this.Article = response.data}).catch(error => {console.log(error)})
      },
      // slug = get_comments
      showComments(get_comments){
        axios.get(`/articles/comm/${get_comments}/`).then(response => {this.Comments = response.data}).catch(error => {console.log(error)})
      },
      // showArticleStars(slug){
      //   axios.get(`/articles/article-stars/${slug}/`).then(response => {this.articalStarGrade = response.data.total[0]}).catch(error => {console.log(error)})
      // },
      // showUserStars(userID,get_slug){
      //   if(userID){
      //     axios.get(`/articles/user-stars/${userID}/${get_slug}/`).then(response => {console.log(response.data[0].stars,'000'),this.showStarUser =response.data[0].stars}).catch(error => {console.log(error)})
      //   }

      // },
      toggleModel (value) {
        this.name = value
      },
      publish (publishComment) {
        this.newComment = this.Comments.push(publishComment)
      },
      publishStar(value1,value2){
        this.datax = value2
        this.totalStars = value1
      }

    }

}
</script>
